class Solution {
    public Node cloneGraph(Node node) {
        List<Node> vis = new ArrayList<>(101);
        for (int i = 0; i < 101; i++) {
            vis.add(null);
        }
        if (node == null) {
            return null;
        }
        Node ans = new Node(node.val);
        vis.set(node.val, ans);
        for (Node curr : node.neighbors) {
            if (vis.get(curr.val) == null) {
                Node newNode = new Node(curr.val);
                ans.neighbors.add(newNode);
                dfs(curr, newNode, vis);
            } else {
                ans.neighbors.add(vis.get(curr.val));
            }
        }
        return ans;
    }

    private void dfs(Node curr, Node node, List<Node> vis) {
        vis.set(node.val, node);
        for (Node it : curr.neighbors) {
            if (vis.get(it.val) == null) {
                Node newNode = new Node(it.val);
                node.neighbors.add(newNode);
                dfs(it, newNode, vis);
            } else {
                node.neighbors.add(vis.get(it.val));
            }
        }
    }
}
