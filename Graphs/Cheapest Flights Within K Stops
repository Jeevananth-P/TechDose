import java.util.*;

class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        List<List<int[]>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] flight : flights) {
            adj.get(flight[0]).add(new int[]{flight[1], flight[2]});
        }
        Queue<int[]> pq = new LinkedList<>();
        pq.offer(new int[]{0, src, 0});
        int[] dis = new int[n];
        Arrays.fill(dis, Integer.MAX_VALUE);
        dis[src] = 0;
        while (!pq.isEmpty()) {
            int[] t = pq.poll();
            int stops = t[0];
            int node = t[1];
            int cost = t[2];
            if (stops > k) continue;
            for (int[] it : adj.get(node)) {
                int nnode = it[0];
                int nweigh = it[1];
                if (cost + nweigh < dis[nnode]) {
                    dis[nnode] = cost + nweigh;
                    pq.offer(new int[]{stops + 1, nnode, cost + nweigh});
                }
            }
        }
        if (dis[dst] == Integer.MAX_VALUE) {
            return -1;
        }
        return dis[dst];
    }
}
